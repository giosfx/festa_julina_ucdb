#!/bin/bash

# Script de prepara√ß√£o final para deploy
# Executa verifica√ß√µes e prepara√ß√µes finais antes do deploy

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para logging
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

echo "üöÄ Prepara√ß√£o Final para Deploy - Festa Julina UCDB"
echo "=================================================="

# 1. Verificar estrutura do projeto
log "üìÅ Verificando estrutura do projeto..."
if [ ! -f "package.json" ]; then
    error "package.json n√£o encontrado na raiz do projeto"
    exit 1
fi

if [ ! -d "apps/backend" ] || [ ! -d "apps/frontend" ]; then
    error "Estrutura de pastas apps/backend ou apps/frontend n√£o encontrada"
    exit 1
fi

# 2. Verificar arquivos de deploy
log "üê≥ Verificando arquivos Docker..."
REQUIRED_FILES=(
    "DockerfileBackend"
    "DockerfileFrontend" 
    "docker-compose.yml"
    "docker-compose.prod.yml"
    ".dockerignore"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        error "Arquivo obrigat√≥rio n√£o encontrado: $file"
        exit 1
    fi
done

# 3. Verificar pipelines
log "üîÑ Verificando pipelines Azure DevOps..."
PIPELINE_FILES=(
    "azure-pipelines-ci.yml"
    "azure-pipelines-cd.yml"
)

for file in "${PIPELINE_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        error "Pipeline n√£o encontrada: $file"
        exit 1
    fi
done

# 4. Verificar scripts
log "üìú Verificando scripts..."
SCRIPT_FILES=(
    "deploy.sh"
    "test-docker-build.sh"
)

for file in "${SCRIPT_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        error "Script n√£o encontrado: $file"
        exit 1
    fi
    
    if [ ! -x "$file" ]; then
        warn "Concedendo permiss√£o de execu√ß√£o para $file"
        chmod +x "$file"
    fi
done

# 5. Verificar configura√ß√£o de produ√ß√£o
log "‚öôÔ∏è Verificando configura√ß√µes de produ√ß√£o..."
if [ ! -f ".env.prod.example" ]; then
    error "Arquivo .env.prod.example n√£o encontrado"
    exit 1
fi

if [ ! -f ".env.prod" ]; then
    warn "Arquivo .env.prod n√£o encontrado. Criando a partir do exemplo..."
    cp .env.prod.example .env.prod
    info "‚úÖ Arquivo .env.prod criado. CONFIGURE AS VARI√ÅVEIS ANTES DO DEPLOY!"
fi

# 6. Verificar configura√ß√£o do Nginx
log "üåê Verificando configura√ß√£o Nginx..."
if [ ! -f "nginx.conf" ]; then
    error "Arquivo nginx.conf n√£o encontrado"
    exit 1
fi

# Verificar se cont√©m as configura√ß√µes corretas
if ! grep -q "app-pais.ucdb.br/festa-julina" nginx.conf; then
    error "Configura√ß√£o nginx.conf n√£o cont√©m server_name correto"
    exit 1
fi

if ! grep -q "172.17.0.1:3000" nginx.conf; then
    error "Configura√ß√£o nginx.conf n√£o cont√©m proxy para frontend"
    exit 1
fi

if ! grep -q "172.17.0.1:3001" nginx.conf; then
    error "Configura√ß√£o nginx.conf n√£o cont√©m proxy para backend"
    exit 1
fi

# 7. Verificar depend√™ncias
log "üì¶ Verificando depend√™ncias..."
if [ ! -f "pnpm-lock.yaml" ]; then
    warn "pnpm-lock.yaml n√£o encontrado. Execute 'pnpm install' antes do deploy"
fi

# 8. Verificar configura√ß√£o Next.js
log "‚öõÔ∏è Verificando configura√ß√£o Next.js..."
if ! grep -q "output.*standalone" apps/frontend/next.config.ts; then
    error "Next.js n√£o est√° configurado com output: 'standalone'"
    exit 1
fi

# 9. Verificar health endpoints
log "üè• Verificando health endpoints..."
if [ ! -f "apps/backend/src/app.controller.ts" ]; then
    error "Controller do backend n√£o encontrado"
    exit 1
fi

if ! grep -q "@Get('health')" apps/backend/src/app.controller.ts; then
    warn "Health endpoint n√£o encontrado no backend"
fi

if [ ! -f "apps/frontend/src/app/api/health/route.ts" ]; then
    warn "Health endpoint n√£o encontrado no frontend"
fi

# 10. Criar resumo final
log "üìã Resumo da prepara√ß√£o..."
echo ""
echo "‚úÖ CONFIGURA√á√ïES VERIFICADAS COM SUCESSO!"
echo ""
echo "üìÇ Arquivos criados/verificados:"
echo "  ‚Ä¢ Dockerfiles para backend e frontend"
echo "  ‚Ä¢ Docker Compose para dev e produ√ß√£o"
echo "  ‚Ä¢ Pipelines CI/CD para Azure DevOps"
echo "  ‚Ä¢ Scripts de deploy e teste"
echo "  ‚Ä¢ Configura√ß√£o Nginx com proxy reverso"
echo "  ‚Ä¢ Arquivo .env.prod para produ√ß√£o"
echo "  ‚Ä¢ Health endpoints nas aplica√ß√µes"
echo "  ‚Ä¢ Tasks do VS Code para desenvolvimento"
echo ""
echo "üîÑ PR√ìXIMOS PASSOS:"
echo "  1. Configure as vari√°veis em .env.prod"
echo "  2. Configure variable groups no Azure DevOps:"
echo "     ‚Ä¢ azure (credenciais Azure e ACR)"
echo "     ‚Ä¢ festajulina (vari√°veis da aplica√ß√£o)" 
echo "  3. Configure service connection no Azure DevOps"
echo "  4. Crie environment 'festajulina' no Azure DevOps"
echo "  5. Importe as pipelines no Azure DevOps"
echo "  6. Execute deploy: ./deploy.sh"
echo ""
echo "üìö DOCUMENTA√á√ÉO:"
echo "  ‚Ä¢ DEPLOY.md - Guia completo"
echo "  ‚Ä¢ DEPLOY_QUICKSTART.md - Guia r√°pido"
echo "  ‚Ä¢ CHECKLIST_FINAL.md - Lista de verifica√ß√£o"
echo "  ‚Ä¢ NGINX_CONFIG.md - Configura√ß√£o Nginx"
echo ""

info "üéâ Projeto FESTA JULINA UCDB est√° pronto para deploy!"
info "üìñ Consulte CHECKLIST_FINAL.md para pr√≥ximos passos"
